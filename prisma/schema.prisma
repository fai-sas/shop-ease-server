generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  VENDOR
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

model User {
  userId             String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole   @default(USER)
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  vendor             Vendor?
  customer           Customer?

  @@map("users")
}

model Vendor {
  vendorId      String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  description   String?
  contactNumber String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  products  Product[]
  orders    Order[]
  followers VendorFollow[]

  @@map("vendors")
}

model Customer {
  customerId    String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  reviews        Review[]
  orders         Order[]
  cartItems      CartItem[]
  recentlyViewed RecentlyViewed[]
  follows        VendorFollow[]

  @@map("customers")
}

model Product {
  productId   String   @id @default(uuid())
  name        String
  description String?
  price       Int
  discount    Int      @default(0)
  inventory   Int
  isDeleted   Boolean  @default(false)
  categoryId  String
  vendorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendor         Vendor           @relation(fields: [vendorId], references: [vendorId])
  category       Category         @relation(fields: [categoryId], references: [categoryId])
  reviews        Review[]
  orderItems     OrderItem[]
  cartItem       CartItem[]
  recentlyViewed RecentlyViewed[]

  @@map("products")
}

model Category {
  categoryId String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Review {
  reviewId   String   @id @default(uuid())
  rating     Int
  comment    String?
  productId  String
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product  Product  @relation(fields: [productId], references: [productId])
  customer Customer @relation(fields: [customerId], references: [customerId])

  @@map("reviews")
}

model Order {
  oderId        String   @id @default(uuid())
  customerId    String
  vendorId      String
  totalPrice    Int
  status        String
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer Customer    @relation(fields: [customerId], references: [customerId])
  vendor   Vendor      @relation(fields: [vendorId], references: [vendorId])
  items    OrderItem[]

  @@map("orders")
}

model OrderItem {
  orderItemId String   @id @default(uuid())
  productId   String
  orderId     String
  quantity    Int
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product @relation(fields: [productId], references: [productId])
  order   Order   @relation(fields: [orderId], references: [oderId])

  @@map("order_items")
}

model CartItem {
  cartItemId String   @id @default(uuid())
  productId  String
  customerId String
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product  Product  @relation(fields: [productId], references: [productId])
  customer Customer @relation(fields: [customerId], references: [customerId])

  @@map("cart_items")
}

model RecentlyViewed {
  recentlyViewedId String   @id @default(uuid())
  productId        String
  customerId       String
  viewedAt         DateTime @default(now())

  product  Product  @relation(fields: [productId], references: [productId])
  customer Customer @relation(fields: [customerId], references: [customerId])

  @@map("recently_viewed")
}

model VendorFollow {
  vendorFollowId String   @id @default(uuid())
  customerId     String
  vendorId       String
  followedAt     DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [customerId])
  vendor   Vendor   @relation(fields: [vendorId], references: [vendorId])

  @@map("vendor_follows")
}
